<?php

/**
 * @file
 * Simple Facebook Login Module for Drupal Sites.
 */
define("SIMPLE_FB_CONNECT_DEFAULT_DIMENSIONS_STRING", "1024x1024");
define("SIMPLE_FB_CONNECT_DEFAULT_WIDTH", 1024);
define("SIMPLE_FB_CONNECT_DEFAULT_HEIGHT", 1024);
define("SIMPLE_FB_CONNECT_PERMISSION_DENIED_PARAMETER", 'access_denied');

use Facebook\FacebookSession;
use Facebook\FacebookRedirectLoginHelper;
use Facebook\FacebookSDKException;
use Facebook\FacebookRequest;
use Facebook\FacebookRequestException;

/**
 * Implements hook_menu().
 */
function simple_fb_connect_menu() {
  $items['user/simple-fb-connect'] = array(
    'title' => (variable_get('simple_fb_connect_login_only', 0) == 0 ? 'Register/' : '') . 'Login with FB',
    'page callback' => 'simple_fb_connect_login',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/people/simple-fb-connect'] = array(
    'title' => 'Simple FB Connect Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_fb_connect_api_keys_settings'),
    'access arguments' => array('administer simple fb'),
    'file' => 'simple_fb_connect.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function simple_fb_connect_permission() {
  $items = array();
  $items['administer simple fb'] = array(
    'title' => "Administer Simple Facebook Connect Module settings"
  );
  return $items;
}

/**
 * Page callback for the FB Connect URL.
 * The FB login flow is as follows:
 * 1. When the user arrives to /user/simple-fb-connect, this page callback is invoked.
 * - Only unauthenticated users are allowed to access /user/simple-fb-connect
 * - This is defined in hook_menu
 * - Argument $returned_from_facebook is NULL at this point
 * 2. We generate a Facebook login URL and redirect the user there.
 * - Facebook asks the user to authorize our app
 * - Facebook will return the user to /user/simple-fb-connect/1 (note the last argument)
 * - The purpose of $returned_from_fb argument is to avoid a never-ending
 *   redirect loop if the user does not authorize the app (i.e. clicks 'cancel')
 * 3. After user has arrived to /user/simple-fb-connect/1
 * - If the user has authorized our app, we will now read the user profile from Facebook API
 * - We will then compare the user's email address.
 * - If we have an existing Drupal user with that email address, we will log that user in.
 * - If we don't have an existing Drupal user with that email address, we will create one.
 */
function simple_fb_connect_login($returned_from_fb = NULL) {
  // Check that Facebook PHP SDK is properly installed and that the version is 4.0.x
  $sdk = libraries_detect('facebook-php-sdk-v4');
  if (!is_array($sdk) || !$sdk['installed'] || $sdk['version'] < '4.0' || $sdk['version'] >= '4.1') {
    drupal_set_message(t('Facebook PHP SDK not poperly installed. Contact site administrator.'), 'error');
    drupal_goto("user");
  }

  // Start session if it has not been started yet.
  drupal_session_start();

  if (!simple_fb_connect_initialize()) {
    drupal_set_message(t('Facebook App ID missing. Can not perform login now. Contact site administrator.'), 'error');
    drupal_goto("user");
  }

  // Redirect the user to Facebook.
  // - Facebook will return us to /user/simple-fb-connect/1 which means $returned_from_facebook is 1
  // - $returned_from_facebook parameter is needed to avoid a redirect loop. If the user clicks 'cancel' 
  //   on FB dialog, we must not redirect the user to FB again (that would cause a redirect loop)
  if (!$returned_from_fb) {

    // Save the post login URL to $_SESSION if it was explicitly defined.
    $destination = drupal_get_destination();
    if (!url_is_external($destination['destination']) && $destination['destination'] != 'user/simple-fb-connect') {
      $_SESSION['simple_fb_connect']['post_login_url'] = $destination['destination'];
      // We need to unset the GET parameter so that we actually redirect the user to FB
      unset($_GET['destination']);
    }

    // Generate the FB login URL and redirect the user to FB
    $redirect_url = url('user/simple-fb-connect/1', array('absolute' => TRUE));
    $scope = simple_fb_connect_get_scope();
    $helper = new FacebookRedirectLoginHelper($redirect_url);
    $login_url = $helper->getLoginUrl($scope);
    drupal_goto($login_url);
  }

  // If we are still here, the user has been returned from Facebook.
  // We need to generate a new login helper object with the new URL (inculding the /1) 
  $return_url = url('user/simple-fb-connect/1', array('absolute' => TRUE));
  $helper = new FacebookRedirectLoginHelper($return_url);

  // If we don't have a FB session, show the user a message and redirect
  if (!$session = simple_fb_connect_save_session($helper)) {
    drupal_set_message(t("Facebook login failed because you didn't allow our app to access your Facebook profile. You can create an user account directly to this site with the form below."), "warning");
    drupal_goto("user/register");
  }

  // Get the user's Facebook profile so that we can compare email addresses
  $fb_user_profile = simple_fb_connect_get_fb_profile($session);
  if (!$fb_user_profile) {
    drupal_set_message(t('Error loading Facebook profile. Contact site administrator.'), 'error');
    drupal_goto("user");
  }

  // Read email address from the user profile
  $email = $fb_user_profile->getProperty('email');
  if (!$email) {
    drupal_set_message(t('Facebook login failed. This site requires permission to get your email address. Please try again or log in directly to this site without Facebook.'), 'error');
    drupal_goto("user");
  }

  // Check if we have an existing Drupal user account with the same email address
  $drupal_user = user_load_by_mail($email);

  // If there is an existing drupal user account with the same email address,
  // log that user in and redirect to the path defined in module settings
  if ($drupal_user) {
    if (simple_fb_connect_login_user($drupal_user)) {
      // invoke a login event if Rules module is enabled
      if (module_exists('rules')) {
        rules_invoke_event('simple_fb_connect_login', $drupal_user, $fb_user_profile);
      }
      drupal_set_message(t('You are now logged in with the username @username', array('@username' => $drupal_user->name)));

      $post_login_url = simple_fb_connect_get_post_login_url();
      drupal_goto($post_login_url);
    }

    // The login didn't succeed (account blocked).
    else {
      drupal_set_message(t('You could not be logged in because your account @username has not been activated or is blocked.', array('@username' => $drupal_user->name)), 'error');
      drupal_goto('user');
    }
  }

  // If we haven't redirected the user yet, there is no existing Drupal user account with the same email.
  // If the site does not allow users to register, show an error message
  if (!variable_get('user_register', 1)) {
    drupal_set_message(t('Creation of new accounts on this site is disabled. Please contact site administrator.'), 'error');
    drupal_goto('user');
  }

  // If module settings do not allow new registrations via FB, show an error message
  if (variable_get('simple_fb_connect_login_only', 0)) {
    drupal_set_message(t('Only registered users can log in with Facebook account. Please register first with the form below.'));
    drupal_goto('user/register');
  }

  // If we are still here, the site and module settings allow users to create accounts.
  // Create new user account, log that user in and redirect the user to the page defined in module settings.
  $new_drupal_user = simple_fb_connect_create_user($fb_user_profile, $session);
  if ($new_drupal_user) {
    // New user was succesfully created. Log the user in.
    if (simple_fb_connect_login_user($new_drupal_user)) {
      // invoke a registration event if Rules module is enabled
      if (module_exists('rules')) {
        rules_invoke_event('simple_fb_connect_registration', $new_drupal_user, $fb_user_profile);
      }
      drupal_set_message(t('You have been registered with the username @username.', array('@username' => $new_drupal_user->name)));

      $post_login_url = simple_fb_connect_get_post_login_url();
      drupal_goto($post_login_url);
    }
    // new user was succesfully created but the account is blocked (pending activation)
    else {
      drupal_set_message(t('You have been registered with the username @username but your account is pending approval from the site administrator. You will receive an email when your account is activated.', array('@username' => $new_drupal_user->name)), 'warning');
      drupal_goto(variable_get('simple_fb_connect_post_login_url', 'user'));
    }
  }
  else {
    drupal_set_message(t("Error while creating a new user account. Please contact site administrator."), 'error');
    drupal_goto('user');
  }

  // We should never reach this point because the user is redirected in all cases to some other page
  // If we ever get here, return "access denied" page
  return MENU_ACCESS_DENIED;
}

/**
 * Log the given user in.
 *
 * @param $account
 *   A Drupal user object.
 *
 * @return boolean
 *   TRUE if the account is active and can be logged in
 *   FALSE if the account is not active
 */
function simple_fb_connect_login_user($drupal_user) {
  // If Boost module is used, we need to add DRUPAL_UID cookie.
  // If this cookie is set, Boost will not serve cached pages to the user.
  // user/simple-fb-connect/* must also be added to Boost "cache all pages except those listed"
  if (module_exists('boost')) {
    boost_set_cookie($drupal_user->uid);
  }

  // Check that the account is active
  if ($drupal_user->status) {
    $form_state['uid'] = $drupal_user->uid;
    user_login_submit(array(), $form_state);
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Create a new user account for a Facebook user
 *
 * @param $fb_user_profile
 *   Previously loaded FB user profile object
 * @param $session
 *   FacebookSession object so that we can load user profile pic
 * @return
 *   Drupal user account. FALSE on errors.
 */
function simple_fb_connect_create_user($fb_user_profile, $session) {
  if ($fb_user_profile && $session) {

    $real_name = $fb_user_profile->getProperty('name');
    $email = $fb_user_profile->getProperty('email');

    // Make sure username will be unique
    $drupal_username_generated = simple_fb_connect_unique_user_name($real_name);

    //This will generate a random password. Since the user will never see this password, we can use long 
    //password to make it stronger.
    $password = user_password(32);

    //set up the user fields
    $fields = array(
      'name' => $drupal_username_generated,
      'mail' => $email,
      'pass' => $password,
      'status' => variable_get('user_register', 1) == 1 ? 1 : 0,
      'init' => $email,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );

    // if user pictures are enabled on the site, try to get the user profile picture from Facebook    
    if (variable_get('user_pictures', 0)) {
      $fid = simple_fb_connect_get_fb_profile_pic($session);
      if ($fid) {
        $fields['picture'] = $fid;
      }
    }

    // allow other modules to modify $fields array before the new user is saved
    drupal_alter("simple_fb_connect_register", $fields, $fb_user_profile);

    //the first parameter is left blank so a new user is created
    $account = user_save('', $fields);

    // log new user creation
    if ($account) {
      watchdog(
        'simple_fb_connect',
        'New user created: @username',
        array('@username' => $drupal_username_generated),
        WATCHDOG_NOTICE
      );
      return $account;
    }
  }

  // Something went wrong
  watchdog(
    'simple_fb_connect',
    'Could not create new user.',
    array(),
    WATCHDOG_ERROR
  );
  return FALSE;
}

/**
 * This function will make an API call to FB to get user's Facebook profile
 *
 * @param $session
 *   FacebookSession object
 * @return
 *   FacebookResponse representing the user
 */
function simple_fb_connect_get_fb_profile($session) {
  try {
    $request = new FacebookRequest($session, 'GET', '/me');
    $object = $request->execute()->getGraphObject();
    return $object;
  }
  catch (FacebookRequestException $ex) {
    watchdog(
      'simple_fb_connect',
      'Could not load FB user profile: FacebookRequestException. Error details: @message',
      array('@message' => json_encode($ex->getResponse())),
      WATCHDOG_ERROR
    );
  }
  catch (\Exception $ex) {
    watchdog(
      'simple_fb_connect',
      'Could not load FB user profile: Unhandled exception. Error details: @message',
      array('@message' => $ex->getMessage()),
      WATCHDOG_ERROR
    );
  }

  // Something went wrong
  return FALSE;
}

/**
 * This function will make an API call to FB to get user's Facebook profile picture
 *
 * @param $session
 *   FacebookSession object
 * @return
 *   fid of the Drupal file object. False on errors.
 */
function simple_fb_connect_get_fb_profile_pic($session) {
  // Get desired dimensions from module settings
  $dimensions_in_text = variable_get('user_picture_dimensions', SIMPLE_FB_CONNECT_DEFAULT_DIMENSIONS_STRING);
  $dimensions = explode('x', $dimensions_in_text);
  if (count($dimensions) == 2) {
    $width = $dimensions[0];
    $height = $dimensions[1];
  }
  else {
    $width = SIMPLE_FB_CONNECT_DEFAULT_WIDTH;
    $height = SIMPLE_FB_CONNECT_DEFAULT_HEIGHT;
  }

  // Check that target directory is writeable
  $picture_directory = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures/');
  if (!file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)) {
    watchdog(
      'simple_fb_connect',
      'Could not save FB profile picture. Directory is not writeable: @picture_directory',
      array('@picture_directory' => $picture_directory),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  // Call Graph API to request profile picture
  try {
    $request = new FacebookRequest(
        $session, 'GET', '/me/picture?width=' . $width . '&height=' . $height . '&redirect=false');
    $picture_url = $request->execute()->getGraphObject()->getProperty('url');

    // Save the picture locally. Use FB user_id as file name.
    $fb_user_id = $session->getSessionInfo()->getProperty('user_id');
    $destination = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures') . '/' . check_plain($fb_user_id) . '.jpg';
    if ($file = system_retrieve_file($picture_url, $destination, TRUE)) {
      return $file->fid;
    }
    else {
      watchdog(
        'simple_fb_connect',
        'Could not save FB profile picture. Check that directory is writeable: @destination',
        array('@destination' => $destination),
        WATCHDOG_ERROR
      );
    }
  }
  catch (FacebookRequestException $ex) {
    watchdog(
      'simple_fb_connect',
      'Could not load FB profile picture: FacebookRequestException. Error details: @message',
      array('@message' => json_encode($ex->getResponse())),
      WATCHDOG_ERROR
    );
  }
  catch (\Exception $ex) {
    watchdog(
      'simple_fb_connect',
      'Could not load FB profile picture: Unhandled exception. Error details: @message',
      array('@message' => $ex->getMessage()),
      WATCHDOG_ERROR
    );
  }

  // Something went wrong and the picture could not be loaded / saved.
  return FALSE;
}

/**
 * This function will return the permission scope array which is used with the FB login
 *
 * @return
 *   Array of FB permissions
 */
function simple_fb_connect_get_scope() {
  $scope = array();

  // Check if other modules have added any permissions with our hook
  if (sizeof(module_implements('simple_fb_connect_scope_info')) > 0) {
    // Call modules that implement the hook, and let them change scope.
    $scope = module_invoke_all('simple_fb_connect_scope_info', array());
  }

  // add 'email' permission request. This is needed to match the FB user to Drupal user.
  $scope[] = 'email';
  return ($scope);
}

/**
 * This function will initialize the FB App
 *
 * @return
 *   TRUE if app_id and app_secret have been defiend in module settings. FALSE otherwise.
 */
function simple_fb_connect_initialize() {
  $app_id = variable_get('simple_fb_connect_appid', 0);
  $app_secret = variable_get('simple_fb_connect_skey', 0);

  // Check that the module is configured properly
  if ($app_id || $app_secret) {
    FacebookSession::setDefaultApplication($app_id, $app_secret);
    return TRUE;
  }
  else {
    watchdog(
      'simple_fb_connect',
      'Could not initialize FB App. Define APP ID and APP SECRET on module settings.',
      array(),
      WATCHDOG_ERROR
    );
    return FALSE;
  }
}

/**
 * This function will check that we have a valid FB session after Facebook has
 * returned the user back to our site. Users access token is saved to $_SESSION.
 *
 * @param $helper
 *   FacebookRedirectLoginHelper object
 * @return
 *   FacebookSession object if we have a valid FB session, FALSE otherwise
 */
function simple_fb_connect_save_session($helper) {
  try {
    $session = $helper->getSessionFromRedirect();
  }
  catch (FacebookRequestException $ex) {
    // When Facebook returns an error
    watchdog(
      'simple_fb_connect',
      'Could not save FB session. FacebookRequestException: @message',
      array('@message' => json_encode($ex->getResponse())),
      WATCHDOG_ERROR
    );
    return FALSE;
  }
  catch (\Exception $ex) {
    // When validation fails or other local issues
    watchdog(
      'simple_fb_connect',
      'Could not save FB session. Exception: @message',
      array('@message' => $ex->getMessage()),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  if (!$session) {
    watchdog(
      'simple_fb_connect',
      'Facebook did not return an exception but session was NULL (user might have closed the dialog)',
      array(),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  // If we are still here, Facebook returned a session.
  // Store it to $_SESSION and return it.
  $_SESSION['simple_fb_connect']['user_token'] = $session->getToken();
  return $session;
}

/**
 * This function will load the user access token from $_SESSION and validate it.
 *
 * @return
 *   FacebookSession object if access token was found and session is valid. FALSE otherwise.
 */
function simple_fb_connect_get_session() {
  static $session = NULL;

  // We are only executing the following code when this function is called for the first time
  if (is_null($session)) {
    // debug message
    // drupal_set_message("Validating session... We only want to see this message once per page load.");    
    if (isset($_SESSION) && isset($_SESSION['simple_fb_connect'])) {
      $user_token = $_SESSION['simple_fb_connect']['user_token'];

      // Check that we are able to start a session with the token
      $session = new FacebookSession($user_token);
      try {
        $session->validate();
        return $session;
      }
      catch (FacebookRequestException $ex) {
        // Session not valid, Graph API returned an exception with the reason.
        watchdog(
          'simple_fb_connect',
          'Could not load FB session. FacebookRequestException: @message',
          array('@message' => json_encode($ex->getResponse())),
          WATCHDOG_NOTICE
        );
      }
      catch (\Exception $ex) {
        // Graph API returned info, but it may mismatch the current app or have expired.
        watchdog(
          'simple_fb_connect',
          'Could not load FB session. Exception: @message',
          array('@message' => $ex->getMessage()),
          WATCHDOG_ERROR
        );
      }
    }
    // Return FALSE if we don't have a session at all or if the access token was not valid 
    $session = FALSE;
  }
  return $session;
}

/**
 * Implements hook_libraries_info().
 */
function simple_fb_connect_libraries_info() {
  $libraries['facebook-php-sdk-v4'] = array(
    'name' => 'Facebook PHP SDK v4',
    'vendor url' => 'https://github.com/facebook/facebook-php-sdk-v4',
    'download url' => 'https://github.com/facebook/facebook-php-sdk-v4/releases',
    'version arguments' => array(
      'file' => 'README.md',
      // pattern to search for: Stable-4.0.23
      'pattern' => '@Stable-(\d*\.\d*\.\d*)@'
    ),
    'xautoload' => function($adapter) {
                     $adapter->add('Facebook', 'src');
                   },
  );
  return $libraries;
}

/**
 * Generates a unique username for drupal site based on fb username.
 */
function simple_fb_connect_unique_user_name($fb_name, $i = 0) {
  $trimmed_name = trim($fb_name);

  if ($i == 0) {
    $user_to_load = $trimmed_name;
  }
  else {
    $user_to_load = $trimmed_name . " " . $i;
  }

  // Check if user exists by loading userbyname
  if (is_object(user_load_by_name($user_to_load))) {
    $i++;
    return (simple_fb_connect_unique_user_name($trimmed_name, $i));
  }
  else {
    return $user_to_load;
  }
}

/**
 * Create a rules event to react on Facebook connection of accounts
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function simple_fb_connect_rules_event_info() {
  return array(
    'simple_fb_connect_login' => array(
      'label' => t('User logs in to their existing Drupal account with Facebook'),
      'module' => 'simple_fb_connect',
      'group' => t('Social Media'),
      'variables' => array(
        'user' => array('type' => 'user', 'label' => t('The user logging in with Facebook')),
      ),
    ),
    'fb_registration' => array(
      'label' => t('User registers a new account connected to Facebook'),
      'module' => 'simple_fb_connect',
      'group' => t('Social Media'),
      'variables' => array(
        'user' => array('type' => 'user', 'label' => t('The user registering the account')),
      ),
    ),
  );
}

/**
 * This function returns the path were user should be redirected after a successful FB login
 *
 * @return
 *   path where the user should be redirected after FB login
 */
function simple_fb_connect_get_post_login_url() {
  $post_login_url = variable_get('simple_fb_connect_post_login_url', 'user');

  // If we have stored the destination to $_SESSION, use that instead
  if (isset($_SESSION) && isset($_SESSION['simple_fb_connect']) && isset($_SESSION['simple_fb_connect']['post_login_url'])) {
    $post_login_url = $_SESSION['simple_fb_connect']['post_login_url'];
  }

  return $post_login_url;
}
